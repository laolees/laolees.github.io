<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Laolees</title>
  
  <subtitle>laolees.github.io</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://laolees.github.io/"/>
  <updated>2019-11-07T11:06:27.000Z</updated>
  <id>https://laolees.github.io/</id>
  
  <author>
    <name>laolees</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用 ELK (Elasticsearch + Logstash + Kibana) 搭建日志集中分析平台实践</title>
    <link href="https://laolees.github.io/2019/11/07/Docker-ELK/"/>
    <id>https://laolees.github.io/2019/11/07/Docker-ELK/</id>
    <published>2019-11-07T11:05:01.000Z</published>
    <updated>2019-11-07T11:06:27.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="使用-ELK-Elasticsearch-Logstash-Kibana-搭建日志集中分析平台实践"><a href="#使用-ELK-Elasticsearch-Logstash-Kibana-搭建日志集中分析平台实践" class="headerlink" title="使用 ELK (Elasticsearch + Logstash + Kibana) 搭建日志集中分析平台实践"></a>使用 ELK (Elasticsearch + Logstash + Kibana) 搭建日志集中分析平台实践</h3><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Elasticsearch + Logstash + Kibana （ ELK ）是一套开源的日志管理方案，分析网站的访问情况时我们一般会借助 Google/百度 /CNZZ 等方式嵌入 JS 做数据统计，但是当网站访问异常或者被攻击时我们需要在后台分析如 Nginx 的具体日志，而 Nginx 日志分割 /GoAccess/Awstats 都是相对简单的单节点解决方案，针对分布式集群或者数据量级较大时会显得心有余而力不足，而 ELK 的出现可以使我们从容面对新的挑战。</p><ul><li>Logstash：负责日志的收集，处理和储存</li><li>Elasticsearch：负责日志检索和分析</li><li>Kibana：负责日志的可视化</li></ul><blockquote><p>ELK(Elasticsearch + Logstash + Kibana)</p></blockquote><hr><h2 id="ELK-简介"><a href="#ELK-简介" class="headerlink" title="ELK 简介"></a>ELK 简介</h2><p><a href="https://www.elastic.co/guide/index.html" target="_blank" rel="noopener">ELK 官方文档</a> 是一个分布式、可扩展、实时的搜索与数据分析引擎。目前我在工作中只用来收集 server 的 log, 开发锅锅们 debug 的好助手。</p><h2 id="安装设置集群-ELK-版本-6-7"><a href="#安装设置集群-ELK-版本-6-7" class="headerlink" title="安装设置集群 ELK 版本 6.7"></a>安装设置集群 ELK 版本 6.7</h2><p><a href="https://www.elastic.co/guide/en/elastic-stack/current/installing-elastic-stack.html" target="_blank" rel="noopener">ELK 安装文档</a>集群主要是高可用，多节点的 Elasticsearch 还可以扩容。本文中用的官方镜像 The base image is <a href="https://hub.docker.com/_/centos/" target="_blank" rel="noopener">centos:7</a></p><h3 id="Elasticsearch-多节点安装"><a href="#Elasticsearch-多节点安装" class="headerlink" title="Elasticsearch 多节点安装"></a>Elasticsearch 多节点安装</h3><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/6.7/docker.html" target="_blank" rel="noopener">官方安装文档 Elasticsearch</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 挂载出来的文件夹权限非常的重要</span></span><br><span class="line">mkdir -p /data/elk-data &amp;&amp; chmod 755 /data/elk-data</span><br><span class="line">chmod g+rwx /data/elk-data</span><br><span class="line">chown -R 1000 /data/elk-data</span><br><span class="line">docker run -p WAN_IP:9200:9200 -p 10.66.236.116:9300:9300 \</span><br><span class="line">-v /data/elk-data:/usr/share/elasticsearch/data \</span><br><span class="line">--name test_elk \</span><br><span class="line">docker.elastic.co/elasticsearch/elasticsearch:6.7.0</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 160.255.0.227:9200:9200 -p 160.255.0.227:9300:9300 -v /data/elk-data:/usr/share/elasticsearch/data --name test_elasticsearch docker.elastic.co/elasticsearch/elasticsearch:6.7.0</span><br><span class="line"></span><br><span class="line">docker run -d -p 160.255.0.165:9200:9200 -p 160.255.0.165:9300:9300 -v /data/elk-data:/usr/share/elasticsearch/data --name test_elasticsearch  docker.elastic.co/elasticsearch/elasticsearch:6.7.0</span><br><span class="line"></span><br><span class="line">docker run -d -p 160.255.0.133:9200:9200 -p 160.255.0.133:9300:9300 -v /data/elk-data:/usr/share/elasticsearch/data --name test_elasticsearch  docker.elastic.co/elasticsearch/elasticsearch:6.7.0</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Master 节点 node-1</span></span><br><span class="line"><span class="comment"># 进入容器 docker exec -it test_elk bash</span></span><br><span class="line"><span class="comment"># docker exec -it test_elk bash</span></span><br><span class="line"><span class="comment"># vi /usr/share/elasticsearch/config/elasticsearch.yml</span></span><br><span class="line"><span class="string">cluster.name:</span> <span class="string">"test_elk"</span></span><br><span class="line"><span class="string">network.host:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"><span class="string">node.master:</span> <span class="literal">true</span></span><br><span class="line"><span class="string">node.data:</span> <span class="literal">true</span></span><br><span class="line"><span class="string">node.name:</span> <span class="string">node2</span></span><br><span class="line"><span class="string">network.publish_host:</span> <span class="number">160.255</span><span class="number">.0</span><span class="number">.227</span></span><br><span class="line"><span class="string">discovery.zen.ping.unicast.hosts:</span> <span class="string">["160.255.0.227:9300","160.255.0.165:9300","160.255.0.133:9300"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># exit</span></span><br><span class="line"><span class="comment"># docker restart  test_elk</span></span><br><span class="line"><span class="comment"># slave 节点 node-2</span></span><br><span class="line"><span class="comment"># 进入容器 docker exec -it test_elk bash</span></span><br><span class="line"><span class="comment"># vi /usr/share/elasticsearch/config/elasticsearch.yml</span></span><br><span class="line"><span class="string">cluster.name:</span> <span class="string">"test_elk"</span></span><br><span class="line"><span class="string">network.host:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"><span class="string">node.master:</span> <span class="literal">true</span></span><br><span class="line"><span class="string">node.data:</span> <span class="literal">true</span></span><br><span class="line"><span class="string">node.name:</span> <span class="string">node3</span></span><br><span class="line"><span class="string">network.publish_host:</span> <span class="number">160.255</span><span class="number">.0</span><span class="number">.165</span></span><br><span class="line"><span class="string">discovery.zen.ping.unicast.hosts:</span> <span class="string">["160.255.0.227:9300","160.255.0.165:9300","160.255.0.133:9300"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># exit</span></span><br><span class="line"><span class="comment"># docker restart  test_elk</span></span><br><span class="line"><span class="comment"># slave 节点 node-3</span></span><br><span class="line"><span class="comment"># 进入容器 docker exec -it test_elk bash</span></span><br><span class="line"><span class="comment"># vi /usr/share/elasticsearch/config/elasticsearch.yml</span></span><br><span class="line"><span class="string">cluster.name:</span> <span class="string">"test_elk"</span></span><br><span class="line"><span class="string">network.host:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"><span class="string">node.master:</span> <span class="literal">true</span></span><br><span class="line"><span class="string">node.data:</span> <span class="literal">true</span></span><br><span class="line"><span class="string">node.name:</span> <span class="string">node4</span></span><br><span class="line"><span class="string">network.publish_host:</span> <span class="number">160.255</span><span class="number">.0</span><span class="number">.133</span></span><br><span class="line"><span class="string">discovery.zen.ping.unicast.hosts:</span> <span class="string">["160.255.0.227:9300","160.255.0.165:9300","160.255.0.133:9300"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># exit</span></span><br><span class="line"><span class="comment"># docker restart  test_elk</span></span><br></pre></td></tr></table></figure><p>检查集群节点个数，状态等</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># curl http://160.255.0.227:9200/_cluster/health?pretty</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"cluster_name"</span> : <span class="string">"test_elk"</span>,</span><br><span class="line">  <span class="string">"status"</span> : <span class="string">"green"</span>,</span><br><span class="line">  <span class="string">"timed_out"</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="string">"number_of_nodes"</span> : 3,</span><br><span class="line">  <span class="string">"number_of_data_nodes"</span> : 3,</span><br><span class="line">  <span class="string">"active_primary_shards"</span> : 0,</span><br><span class="line">  <span class="string">"active_shards"</span> : 0,</span><br><span class="line">  <span class="string">"relocating_shards"</span> : 0,</span><br><span class="line">  <span class="string">"initializing_shards"</span> : 0,</span><br><span class="line">  <span class="string">"unassigned_shards"</span> : 0,</span><br><span class="line">  <span class="string">"delayed_unassigned_shards"</span> : 0,</span><br><span class="line">  <span class="string">"number_of_pending_tasks"</span> : 0,</span><br><span class="line">  <span class="string">"number_of_in_flight_fetch"</span> : 0,</span><br><span class="line">  <span class="string">"task_max_waiting_in_queue_millis"</span> : 0,</span><br><span class="line">  <span class="string">"active_shards_percent_as_number"</span> : 100.0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Kibana-安装"><a href="#Kibana-安装" class="headerlink" title="Kibana 安装"></a>Kibana 安装</h3><p><a href="https://www.elastic.co/guide/en/kibana/6.7/docker.html" target="_blank" rel="noopener">官方安装文档 Kibana</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker run --link YOUR_ELASTICSEARCH_CONTAINER_NAME_OR_ID:elasticsearch -p 5601:5601 &#123;docker-repo&#125;:&#123;version&#125;</span></span><br><span class="line">docker run -d --restart always -p 160.255.0.227:5601:5601 --link test_elk:elasticsearch --name kibana docker.elastic.co/kibana/kibana:6.7.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意的是 --link 官方其实并不推荐的，推荐的是 use user-defined networks https://docs.docker.com/network/links/</span></span><br><span class="line"><span class="comment"># 测试不用 --link 也可以通。直接用容器的 IP</span></span><br><span class="line">docker run -d --restart always -p 外网 IP:5601:5601 --name test_kibana docker.elastic.co/kibana/kibana:6.7.0</span><br></pre></td></tr></table></figure><p>we recommend that you use user-defined networks to facilitate communication between two containers instead of using –<a href="https://docs.docker.com/network/links/" target="_blank" rel="noopener">link</a></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vi /usr/share/kibana/config/kibana.yml</span></span><br><span class="line"><span class="comment"># 需要把 hosts IP 改为 elasticsearch 容器的 IP</span></span><br><span class="line"><span class="comment"># 我这里 elasticsearch 容器的 IP 是 172.17.0.2</span></span><br><span class="line"><span class="comment"># 如何查看 docker inspect elasticsearch_ID</span></span><br><span class="line"><span class="string">server.name:</span> <span class="string">kibana</span></span><br><span class="line"><span class="string">server.host:</span> <span class="string">"0.0.0.0"</span></span><br><span class="line"><span class="string">elasticsearch.hosts:</span> <span class="string">[</span> <span class="string">"http://172.17.0.2:9200"</span> <span class="string">]</span></span><br><span class="line"><span class="string">xpack.monitoring.ui.container.elasticsearch.enabled:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 退出容器并重启</span></span><br><span class="line"><span class="string">docker</span> <span class="string">restart</span> <span class="string">[container_ID]</span></span><br></pre></td></tr></table></figure><h3 id="Logstash-安装"><a href="#Logstash-安装" class="headerlink" title="Logstash 安装"></a>Logstash 安装</h3><p>官方安装文档 <a href="https://www.elastic.co/guide/en/logstash/6.7/docker.html" target="_blank" rel="noopener">Logstash</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker -d 以后台的方式启动容器  --name 参数显式地为容器命名</span></span><br><span class="line">docker run -p 5044:5044 -d --name test_logstash  docker.elastic.co/logstash/logstash:6.7.0</span><br><span class="line"><span class="comment"># 也可以指定网卡，监听在内网或者外网 监听在内网 160.255.0.227</span></span><br><span class="line">docker run -p 160.255.0.227:5044:5044 -d --name test_logstash  docker.elastic.co/logstash/logstash:6.7.0</span><br><span class="line"><span class="comment"># docker exec -it test_logstash bash</span></span><br><span class="line"><span class="comment"># vi /usr/share/logstash/pipeline/logstash.conf</span></span><br><span class="line"><span class="comment"># 配置详情请参考下面的链接,记得 output hosts IP 指向 Elasticsearch 的 IP</span></span><br><span class="line"><span class="comment"># Elasticsearch 的默认端口是 9200，在下面的配置中可以省略。</span></span><br><span class="line">  elasticseatch &#123;</span><br><span class="line">    hosts =&gt; [<span class="string">"160.255.0.227"</span>,<span class="string">"160.255.0.165"</span>,<span class="string">"160.255.0.133"</span>]</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="配置文件结构"><a href="#配置文件结构" class="headerlink" title="配置文件结构"></a>配置文件结构</h4><p>Logstash配置文件可以配置所有插件（Plugin），<code>input filter output codec</code>，存在多个filter则按顺序应用。每个Plugin都支持丰富的扩展。</p><p>For example：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">  file &#123;</span><br><span class="line">    path =&gt; <span class="string">"/var/log/messages"</span></span><br><span class="line">    <span class="built_in">type</span> =&gt; <span class="string">"syslog"</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  file &#123;</span><br><span class="line">    path =&gt; <span class="string">"/var/log/apache/access.log"</span></span><br><span class="line">    <span class="built_in">type</span> =&gt; <span class="string">"apache"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href>logstash 过滤规则</a> 见上文的配置和 grok 语法规则</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vi /usr/share/logstash/config/logstash.yml</span></span><br><span class="line"><span class="comment"># 需要把 url 改为 elasticsearch master 节点的 IP</span></span><br><span class="line"><span class="string">http.host:</span> <span class="string">"0.0.0.0"</span></span><br><span class="line"><span class="string">xpack.monitoring.elasticsearch.url:</span> <span class="attr">http://elasticsearch_master_IP:9200</span></span><br><span class="line"><span class="string">node.name:</span> <span class="string">"node2"</span></span><br><span class="line"><span class="string">pipeline.workers:</span> <span class="number">24</span> <span class="comment"># same with cores</span></span><br></pre></td></tr></table></figure><h3 id="Filebeat-安装"><a href="#Filebeat-安装" class="headerlink" title="Filebeat 安装"></a>Filebeat 安装</h3><p>官方安装文档<a href="https://www.elastic.co/guide/en/beats/filebeat/7.1/running-on-docker.html#_customize_your_configuration" target="_blank" rel="noopener">Filebeat</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line">-d --name filebeat \</span><br><span class="line">-v /data/prod/seat/tomcat/logs:/var/<span class="built_in">log</span>/tomcat \</span><br><span class="line">-v /data/filebeat/filebeat.docker.yml:/usr/share/filebeat/filebeat.yml:ro \</span><br><span class="line">-v /var/lib/docker/containers:/var/lib/docker/containers:ro \</span><br><span class="line">-v /var/run/docker.sock:/var/run/docker.sock:ro \</span><br><span class="line">docker.elastic.co/beats/filebeat:7.1.1</span><br></pre></td></tr></table></figure><p>filebeat.yml文件结构</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">filebeat.inputs:</span></span><br><span class="line"><span class="attr">- type:</span> <span class="string">log</span></span><br><span class="line"><span class="attr">  enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  paths:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">/var/log/tomcat/applogs.log</span></span><br><span class="line"><span class="string">output.elasticsearch:</span></span><br><span class="line"><span class="attr">  hosts:</span> <span class="string">["160.255.0.240:9200"]</span></span><br><span class="line"><span class="string">setup.kibana:</span></span><br><span class="line"><span class="attr">  host:</span> <span class="string">"160.255.0.240:5601"</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;使用-ELK-Elasticsearch-Logstash-Kibana-搭建日志集中分析平台实践&quot;&gt;&lt;a href=&quot;#使用-ELK-Elasticsearch-Logstash-Kibana-搭建日志集中分析平台实践&quot; class=&quot;headerlink&quot; t
      
    
    </summary>
    
    
    
      <category term="elk" scheme="https://laolees.github.io/tags/elk/"/>
    
  </entry>
  
  <entry>
    <title>Ansible 从入门到放弃</title>
    <link href="https://laolees.github.io/2019/04/23/ansible-automating/"/>
    <id>https://laolees.github.io/2019/04/23/ansible-automating/</id>
    <published>2019-04-23T06:29:08.000Z</published>
    <updated>2019-11-07T11:54:17.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/intro/ansible-bg.jpg" alt="ansible"></p><h3 id="Handler字段"><a href="#Handler字段" class="headerlink" title="Handler字段"></a>Handler字段</h3><p>handler字段定义的任务可以被<code>task</code>的<code>notify</code>字段引用，用于该task如果执行的结果为changed（即在远端服务器上完成了实际操作），则被引用的handler执行；反之，则不执行。</p><p>handler一般情况都是在所有task执行完之后，若被引用才执行。<br>若果想让task执行完之后立刻执行引用的handler，可以用<code>meta: flush_handlers</code>字段。</p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>变量通过<code>vars</code>字段定义，可以同时定义多个键值对形式的变量，<code></code>引用变量的格式。还可以将变量分成不同属性，分类引用。如果有大量变量，可以单独使用一个yml文件统一存放变量，通过<code>vars_files</code>字段直接引用这个变量文件。</p><ol><li><p>内置变量：ansible-playbook每次执行是都会先收集远程主机的信息，保存到大量的变量中，这些变量我们也可以使用。<code>ansible test10 -m setup</code>返回json格式的所有收集到的变量。我们还能够在远端主机中写入一些自定义的信息，这些信息也可以被setup模块收集到。这些信息通常以json或者INI格式被定义在<code>/etc/ansible/facts.d/</code>目录下的<code>.fact</code>文件中。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[testmsg]</span></span><br><span class="line"><span class="attr">msg1</span>=This is the first custom test message</span><br><span class="line"><span class="attr">msg2</span>=This is the second custom test message</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"testmsg"</span>:&#123;</span><br><span class="line">        <span class="attr">"msg1"</span>:<span class="string">"Thsi is the first custom test message"</span>,</span><br><span class="line">        <span class="attr">"msg2"</span>:<span class="string">"This is the second custom test message"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">通过`ansible test10 0m setup -a &quot;filter=ansible_local&quot;`获取自定义信息。</span><br></pre></td></tr></table></figure></li><li><p>debug用于输出调试信息，引用在远程主机收集的变量信息<code>anbile_memory_mb.real</code>，yaml通用的变量引用方式。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">- hosts:</span> <span class="string">host_all</span></span><br><span class="line"><span class="attr">  vars:</span></span><br><span class="line"><span class="attr">    testvar:</span> <span class="string">value</span> <span class="string">of</span> <span class="string">test</span> <span class="string">variable</span></span><br><span class="line"><span class="attr">  tasks:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">debug</span> <span class="string">demo</span></span><br><span class="line"><span class="attr">    debug:</span></span><br><span class="line"><span class="attr">      var:</span> <span class="string">testvar</span></span><br><span class="line"><span class="attr">      msg:</span> <span class="string">"Value of testvar is : <span class="template-variable">&#123;&#123;testvar&#125;&#125;</span>"</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">获取远程主机的这些变量不止为了用于输出，我们可以对这些数值进行判断，是否符合我们的要求，然后执行下一步动作。</span><br></pre></td></tr></table></figure></li><li><p>注册变量：使用<code>register</code>接收task执行完返回的变量即为注册变量。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">- hosts:</span> <span class="string">host_all</span></span><br><span class="line"><span class="attr">  tasks:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">test</span> <span class="string">shell</span></span><br><span class="line"><span class="attr">    shell:</span> <span class="string">"echo test &gt; /var/testshellfile"</span></span><br><span class="line"><span class="attr">    register:</span> <span class="string">testvar</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">shell</span> <span class="string">module</span> <span class="string">return</span> <span class="string">values</span></span><br><span class="line"><span class="attr">    debug:</span></span><br><span class="line"><span class="attr">      msg:</span> <span class="string">"<span class="template-variable">&#123;&#123;testvar.cmd&#125;&#125;</span>"</span><span class="comment"># 调用task执行后的注册变量</span></span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li><p>交互式接收标准输入并写入变量。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">- hosts:</span> <span class="string">host10</span></span><br><span class="line"><span class="attr">  tasks:</span></span><br><span class="line"><span class="attr">  vars_prompt:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">"your_name"</span></span><br><span class="line"><span class="attr">    prompt:</span> <span class="string">"Input username"</span></span><br><span class="line"><span class="attr">    def1:</span> <span class="string">admin</span></span><br><span class="line"><span class="attr">    default:</span> <span class="string">def1</span><span class="comment"># 没有输入使用默认值</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">"your_pass"</span></span><br><span class="line"><span class="attr">    prompt:</span> <span class="string">"Input your password"</span></span><br><span class="line"><span class="attr">    private:</span> <span class="literal">no</span></span><br><span class="line"><span class="attr">    confirm:</span> <span class="literal">yes</span><span class="comment"># 提示用户输入两遍密码</span></span><br><span class="line"><span class="attr">    encrypt:</span> <span class="string">"sha512_crypt"</span><span class="comment"># 使用sha512算法对输入的值进行哈希，使用该功能需要先安装passlib库：pip install passlib</span></span><br><span class="line"><span class="attr">  tasks:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">create</span> <span class="string">user</span></span><br><span class="line"><span class="attr">    user:</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">"<span class="template-variable">&#123;&#123;your_name&#125;&#125;</span>"</span></span><br><span class="line"><span class="attr">      password:</span> <span class="string">"<span class="template-variable">&#123;&#123;your_pass&#125;&#125;</span>"</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">output</span> <span class="string">vars</span></span><br><span class="line"><span class="attr">    debug:</span></span><br><span class="line"><span class="attr">      msg:</span> <span class="string">Your</span> <span class="string">name</span> <span class="string">is</span> <span class="string">&#123;&#123;your_name&#125;&#125;,You</span> <span class="string">are</span> <span class="string">&#123;&#123;your_age&#125;&#125;</span> <span class="string">years</span> <span class="string">old.</span></span><br></pre></td></tr></table></figure></li></ol><ol start="5"><li><p>外部变量：在playbook中引用未定义的变量，可以在执行playbook时指定<code>ansible-playbook cmdvar.yml --extra-vars &quot;key=value&quot;</code></p><p>通过json格式传入稍微复杂一点的变量。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible-playbook cmdvar.yml -e '&#123;"countlist":["one","two","three"]&#125;'</span><br></pre></td></tr></table></figure><p>在play中如果要引用列表变量终中的指定值时，有如下两种语法：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#123;&#123;contlist[0]&#125;&#125;</span> </span><br><span class="line"><span class="string">&#123;&#123;contlist.0&#125;&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>在<code>ansible/hosts</code>文件配置主机变量或者主机组变量。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[testB]</span></span><br><span class="line">test10 ansible_host=172.17.9.10</span><br><span class="line">test11 ansible_host=172.17.9.11</span><br><span class="line"><span class="section">[testB:vars]</span></span><br><span class="line"><span class="attr">testB_group_var1</span>=<span class="string">'group var test'</span></span><br><span class="line"><span class="attr">testB_group_var2</span>=<span class="string">'grup var test2'</span></span><br></pre></td></tr></table></figure></li><li><p>set_fact模块定义变量</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">- hosts:</span></span><br><span class="line"><span class="attr">  remote_user:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">  vars:</span></span><br><span class="line"><span class="attr">    testva1:</span> <span class="string">test1_string</span></span><br><span class="line"><span class="attr">  tasks:</span></span><br><span class="line"><span class="attr">  - shell:</span> <span class="string">"echo test2_string"</span></span><br><span class="line"><span class="attr">    register:</span> <span class="string">shellreturn</span></span><br><span class="line"><span class="attr">  - set_fact:</span></span><br><span class="line"><span class="attr">    testsf1:</span> <span class="string">"&#123;testvar1&#125;"</span></span><br><span class="line"><span class="attr">    testsf2:</span> <span class="string">"<span class="template-variable">&#123;&#123;shellreturn.stdout&#125;&#125;</span>"</span><span class="comment"># 将注册变量赋值给testsf2</span></span><br><span class="line"><span class="attr">  - debug:</span></span><br><span class="line"><span class="attr">    msg:</span> <span class="string">"<span class="template-variable">&#123;&#123;testsf1&#125;&#125;</span> <span class="template-variable">&#123;&#123;testsf2&#125;&#125;</span>"</span></span><br></pre></td></tr></table></figure><p>set_fact变量类似“<strong>全局</strong>”变量，跟每一个play执行之前都会执行”[Gathering Facts]”的默认任务所收集的fact内置变量一样，这个<strong>全局</strong>变量可以在之后的所有play中被引用。注册变量也是“<strong>全局</strong>变量”。</p></li><li><p><strong>hostvars</strong>引用其他主机的fact变量。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">- name:</span> <span class="string">"play 1: Gather facts of test10"</span></span><br><span class="line"><span class="attr">  hosts:</span> <span class="string">test10</span></span><br><span class="line"><span class="attr">  remote_user:</span> <span class="string">root</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">- name:</span> <span class="string">"play2: Get facts of test10 when operation on test20"</span></span><br><span class="line"><span class="attr">  hosts:</span> <span class="string">test20</span></span><br><span class="line"><span class="attr">  remote_user:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">  tasts:</span></span><br><span class="line"><span class="attr">  - debug:</span></span><br><span class="line"><span class="attr">    msg:</span> <span class="string">"<span class="template-variable">&#123;&#123;hostvars.test10.ansible_eth0.ipv4&#125;&#125;</span>"</span></span><br><span class="line">    <span class="comment"># "&#123;&#123;hostvars['test10'].ansible_eth0.ipv4&#125;&#125;"</span></span><br></pre></td></tr></table></figure><p>如果A主机引用B主机的facts，前提是ansible已经收集到B主机的facts才能供A使用，还记不记得每    个play都要执行的默认task”[[Gathering Facts]”，上面我们定义的play1中没有任何task，但是ansible依然会执行默认的收集facts的task，如果将play1删掉，则报错。还可以使用<code></code>收集注册变量、hosts中的主机变量、组变量…<br>默认是不允许跨主机引用vars: [“key1”:”value1”]这种在剧本中定义的主机变量，但是可以使用set_fact字段将其变为全局变量，就可以被hostvars引用了。即通过set_fact结合hostvars的方式，实现跨play获取其他主机中的变量信息的功能。</p></li><li><p>内置变量</p><ul><li><code></code>以列表形式返回当前play中所有的主机名；</li><li><code></code>以列表的形式返回hosts中定义的所有主机清单，返回指定组<code></code>;</li><li><code></code>返回主机所在组名称；</li></ul></li><li><p>vars_files引入变量文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">- hosts:</span> <span class="string">group1</span></span><br><span class="line"><span class="attr">  remote_user:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">  vars_files:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">/root/test/test/bar</span></span><br><span class="line"><span class="attr">  tasks:</span></span><br><span class="line"><span class="attr">  - debug:</span></span><br><span class="line"><span class="attr">      msg:</span> <span class="string">"<span class="template-variable">&#123;&#123; testvar1 &#125;&#125;</span>, <span class="template-variable">&#123;&#123; testvar2 &#125;&#125;</span>"</span></span><br><span class="line"><span class="attr">  - lineinfile:</span></span><br><span class="line"><span class="attr">      path:</span> <span class="string">"/root/test/test/bar"</span></span><br><span class="line"><span class="attr">      line:</span> <span class="string">"testvar: ccc"</span></span><br><span class="line"><span class="attr">  - debug:</span></span><br><span class="line"><span class="attr">      msg:</span> <span class="string">"<span class="template-variable">&#123;&#123; testvar1 &#125;&#125;</span>, <span class="template-variable">&#123;&#123; testvar2 &#125;&#125;</span>, <span class="template-variable">&#123;&#123; testvar3 &#125;&#125;</span>"</span></span><br></pre></td></tr></table></figure><p>执行的结果是变量<code></code>并没有被打印出来，原因是在变量文件写入之后并没有再次读取变量文件。有什么办法可以动态加载变量文件呢，<code>include_vars</code>，<code>include_vars</code>还可以通过name字段将整个文件的变量赋值给另一个变量。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">- hosts:</span> <span class="string">group1</span></span><br><span class="line"><span class="attr">  remote_user:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">  vars_files:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">/root/test/test/bar</span></span><br><span class="line"><span class="attr">  tasks:</span></span><br><span class="line"><span class="attr">  - debug:</span></span><br><span class="line"><span class="attr">      msg:</span> <span class="string">"<span class="template-variable">&#123;&#123; testvar1 &#125;&#125;</span>, <span class="template-variable">&#123;&#123; testvar2 &#125;&#125;</span>"</span></span><br><span class="line"><span class="attr">  - lineinfile:</span></span><br><span class="line"><span class="attr">      path:</span> <span class="string">"/root/test/test/bar"</span></span><br><span class="line"><span class="attr">      line:</span> <span class="string">"testvar: ccc"</span></span><br><span class="line"><span class="attr">  - include_vars:</span> </span><br><span class="line"><span class="attr">    file:</span> <span class="string">/root/test/test/bar</span></span><br><span class="line">    <span class="comment"># dir: /root/test/</span></span><br><span class="line">    <span class="comment"># file_matching: ["^var.*",test.yaml]# 只加载指定的变量文件</span></span><br><span class="line">    <span class="comment"># ignore_files: ["^var_.*",varfile.yaml]# 从上述匹配到的中排除指定变量文件</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">varfile</span></span><br><span class="line"><span class="attr">  - debug:</span></span><br><span class="line"><span class="attr">      msg:</span> <span class="string">"<span class="template-variable">&#123;&#123; varfile.testvar1 &#125;&#125;</span>"</span></span><br></pre></td></tr></table></figure><p><code>include_vars</code>除了可以引入变量文件外，还可以直接使用<code>dir</code>引入目录下所有以<code>.yaml .yml .json</code>结尾的所有文件变量，当然也可以通过正则表达式加载指定变量文件，而且是递归加载，<code>depth:1</code>指定递归深度，要求子目录符合上述要求，否则报错。</p><p>如果我么你想值本次任务加入了哪些变量文件，通过如下方法：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tasks:</span></span><br><span class="line"><span class="attr">- include_vars:</span></span><br><span class="line"><span class="attr">    dir:</span> <span class="string">/root/test/test/</span></span><br><span class="line"><span class="attr">  register:</span> <span class="string">return_val</span></span><br><span class="line"><span class="attr">- debug:</span></span><br><span class="line"><span class="attr">    msg:</span> <span class="string">"<span class="template-variable">&#123;&#123; return_val.ansible_included_var_files&#125;&#125;</span>"</span></span><br></pre></td></tr></table></figure><p>使用上述方式还可以加载一个没有缩进和换行的json文件，以可读格式输出。</p><p>、</p></li></ol><h3 id="标签tag"><a href="#标签tag" class="headerlink" title="标签tag"></a>标签tag</h3><p>如果只想执行playbook的某些task时，或者执行不执行哪些任务时，可以给task打tag，task的tag继承hosts的tag，他们都可以拥有多个tag。只需要在执行的时候<code>ansible-playbook --tags=tag1 testtag.yml</code>加上该参数就好了。ansible预置的5种特殊的tag：</p><ul><li>always</li><li>never</li><li>tagged</li><li>untagged</li><li>all</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">- hosts:</span> <span class="string">node02</span></span><br><span class="line"><span class="attr">  vars:</span></span><br><span class="line"><span class="attr">    nginx:</span></span><br><span class="line"><span class="attr">      conf80:</span> <span class="string">/etc/nginx/conf.d/80.conf</span></span><br><span class="line"><span class="attr">      conf8080:</span> <span class="string">/etc/nginx/conf.d/8080.conf</span></span><br><span class="line"><span class="attr">  vars_files:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">/ansible/nginx_vars.yml</span></span><br><span class="line"><span class="attr">  remote_user:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">  tasks:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">Modify</span> <span class="string">the</span> <span class="string">configuration</span></span><br><span class="line"><span class="attr">    tags:</span></span><br><span class="line"><span class="bullet">     -</span> <span class="string">t1</span></span><br><span class="line"><span class="attr">    lineinfile:</span></span><br><span class="line">      <span class="string">path=/etc/nginx/conf.d/test.com.conf</span></span><br><span class="line">      <span class="string">regexp="listen(.*)8080(.*)"</span></span><br><span class="line">      <span class="string">line="listen\1</span> <span class="number">8080</span><span class="string">\2"</span></span><br><span class="line">      <span class="string">backrefs=yes</span></span><br><span class="line">      <span class="string">backup=yes</span></span><br><span class="line"><span class="attr">    notify:</span></span><br><span class="line">      <span class="string">restart</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">  - meta:</span> <span class="string">flush_handlers</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">  - name:</span> <span class="string">create</span> <span class="string">config</span> <span class="string">file</span></span><br><span class="line"><span class="attr">    tags:</span> <span class="string">tag1,tag2</span></span><br><span class="line"><span class="attr">    file:</span> </span><br><span class="line"><span class="attr">      path:</span> <span class="string">'<span class="template-variable">&#123;&#123; nginx.conf80 &#125;&#125;</span>'</span></span><br><span class="line"><span class="attr">      state:</span> <span class="string">file</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">  handlers:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">restart</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">    service:</span></span><br><span class="line">      <span class="string">name=nginx</span></span><br><span class="line">      <span class="string">state=restarted</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">stoped</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">    service:</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">      state:</span> <span class="string">restart</span></span><br></pre></td></tr></table></figure><h3 id="循环（with-item）"><a href="#循环（with-item）" class="headerlink" title="循环（with_item）"></a>循环（with_item）</h3><p>反手就是一个demo</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">- hosts:</span> <span class="string">test10</span></span><br><span class="line"><span class="attr">  tasts:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">"copy files to test10"</span></span><br><span class="line"><span class="attr">    copy:</span></span><br><span class="line">      <span class="string">src=&#123;&#123;</span> <span class="string">item.src</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="string">dest=&#123;&#123;</span> <span class="string">item.dest</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="string">with_items；</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">&#123;</span> <span class="attr">src:</span> <span class="string">'/etc/ansible/roles/etcd/templates/ca-config.json.j2'</span> <span class="string">,</span> <span class="attr">dest:</span> <span class="string">'/etc/kubernetes/pki/cfssl/ca-config.json'</span><span class="string">&#125;</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">&#123;src:</span> <span class="string">'/etc/ansible/roles/etcd/templates/ca-csr.json.j2'</span> <span class="string">,</span> <span class="attr">dest:</span> <span class="string">'/etc/kubernetes/pki/cfssl/ca-csr.json'</span><span class="string">&#125;</span></span><br><span class="line"><span class="bullet">     -</span> <span class="string">&#123;src:</span> <span class="string">'/etc/ansible/roles/etcd/templates/client.json.j2'</span> <span class="string">,</span> <span class="attr">dest:</span> <span class="string">'/etc/kubernetes/pki/cfssl/client.json'</span><span class="string">&#125;</span></span><br><span class="line"><span class="bullet">     -</span> <span class="string">&#123;src:</span> <span class="string">'/etc/ansible/roles/etcd/templates/member1.json.j2'</span> <span class="string">,</span> <span class="attr">dest:</span> <span class="string">'/etc/kubernetes/pki/cfssl/member1.json'</span><span class="string">&#125;</span></span><br><span class="line"><span class="bullet">     -</span> <span class="string">&#123;src:</span> <span class="string">'/etc/ansible/roles/etcd/templates/server.json.j2'</span> <span class="string">,</span> <span class="attr">dest:</span> <span class="string">'/etc/kubernetes/pki/cfssl/server.json'</span><span class="string">&#125;</span></span><br><span class="line"><span class="bullet">     -</span> <span class="string">&#123;src:</span> <span class="string">'/etc/ansible/roles/etcd/templates/kubeletonce.service.j2'</span> <span class="string">,</span> <span class="attr">dest:</span> <span class="string">'/usr/lib/systemd/system/kubeletonce.service'</span><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><ol><li><p>循环执行shell模块的返回值会追加放到“results”这个返回值中，所以我们也可以通过“results“关键字获取每次执行后的返回值。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">- hosts:</span> <span class="string">test10</span></span><br><span class="line"><span class="attr">  tasks:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">"play 1"</span></span><br><span class="line"><span class="attr">    shell:</span> <span class="string">"<span class="template-variable">&#123;&#123;item&#125;&#125;</span>"</span></span><br><span class="line"><span class="attr">    with_items:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">"ls /opt"</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">"ls /home"</span></span><br><span class="line"><span class="attr">    register:</span> <span class="string">returnvalue</span></span><br><span class="line"><span class="attr">  - debug:</span></span><br><span class="line"><span class="attr">      msg:</span> <span class="string">"<span class="template-variable">&#123;&#123;item.stdout&#125;&#125;</span>"</span></span><br><span class="line"><span class="attr">    with_items:</span> <span class="string">"<span class="template-variable">&#123;&#123;returnvalue.results&#125;&#125;</span>"</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">- hosts:</span> <span class="string">test10</span></span><br><span class="line"><span class="attr">  tasks:</span></span><br><span class="line"><span class="attr">  - shell:</span> <span class="string">"<span class="template-variable">&#123;&#123;item&#125;&#125;</span>"</span></span><br><span class="line"><span class="attr">    with_items:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">"ls /opt"</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">"ls /home"</span></span><br><span class="line"><span class="attr">  - debug:</span></span><br><span class="line"><span class="attr">    msg:</span></span><br><span class="line">    <span class="string">"&#123;% for i in returnvalue.results %&#125;</span></span><br><span class="line"><span class="string">       <span class="template-variable">&#123;&#123; i.stdout &#125;&#125;</span></span></span><br><span class="line"><span class="string">     &#123;% endfor %&#125;"</span></span><br></pre></td></tr></table></figure><p>上面的例子使用的是jinja2语言中的for循环语法，jinja2是一种模板语言，jinja2是一个基于python的模板引擎。</p></li></ol><ol><li><p>with_items</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一种语法格式</span></span><br><span class="line"><span class="attr">- hosts:</span> <span class="string">node10</span></span><br><span class="line"><span class="attr">  vars:</span></span><br><span class="line"><span class="attr">    certdir:</span> <span class="string">"/etc/kubernetes/pki/"</span></span><br><span class="line"><span class="attr">  tasks:</span></span><br><span class="line"><span class="attr">  - shell:</span> <span class="string">"<span class="template-variable">&#123;&#123;item&#125;&#125;</span>"</span></span><br><span class="line"><span class="attr">    with_items:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">"cat <span class="template-variable">&#123;&#123;certdir&#125;&#125;</span>ca.crt"</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">"cat <span class="template-variable">&#123;&#123;certdir&#125;&#125;</span>ca.key"</span></span><br><span class="line"><span class="comment"># 第二种语法格式</span></span><br><span class="line"><span class="attr">with_items:</span> <span class="string">[</span> <span class="string">&#123;&#123;certdir&#125;&#125;ca.crt,</span> <span class="string">&#123;&#123;certdir&#125;&#125;ca.key</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="attr">- hosts:</span> <span class="string">group1</span></span><br><span class="line"><span class="attr">  remote_user:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">  gather_facts:</span> <span class="literal">no</span></span><br><span class="line"><span class="attr">  vars:</span></span><br><span class="line"><span class="attr">  - cert:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">"/etc/kubernetes/pki/"</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">"/root/cfssl/"</span></span><br><span class="line"><span class="attr">  tasks:</span></span><br><span class="line"><span class="attr">  - shell:</span> <span class="string">"ls <span class="template-variable">&#123;&#123; item &#125;&#125;</span>"</span></span><br><span class="line"><span class="attr">    register:</span> <span class="string">returnvar</span></span><br><span class="line"><span class="attr">    with_items:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">"<span class="template-variable">&#123;&#123; cert &#125;&#125;</span>"</span></span><br><span class="line"><span class="attr">  - debug:</span></span><br><span class="line"><span class="attr">      msg:</span> <span class="string">"<span class="template-variable">&#123;&#123; item &#125;&#125;</span>"</span></span><br><span class="line"><span class="attr">    with_items:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">"<span class="template-variable">&#123;&#123; returnvar.results &#125;&#125;</span>"</span></span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>with_list</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">- hosts:</span> <span class="string">node01</span></span><br><span class="line"><span class="attr">  remote_user:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">  gather_facts:</span> <span class="literal">no</span></span><br><span class="line"><span class="attr">  tasks:</span></span><br><span class="line"><span class="attr">  - debug:</span></span><br><span class="line"><span class="attr">      msg:</span> <span class="string">"<span class="template-variable">&#123;&#123;item&#125;&#125;</span>"</span></span><br><span class="line"><span class="attr">    with_list:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">[</span> <span class="number">1</span><span class="string">,</span> <span class="number">2</span><span class="string">,</span> <span class="number">3</span> <span class="string">]</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">[</span> <span class="string">a,</span> <span class="string">b</span> <span class="string">]</span></span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="C:\Users\pc\AppData\Local\Temp\1545130892990.png" alt="1545130892990"></p><p>将<code>with_list</code>改成<code>with_itms</code>的结果：</p><p><img src="C:\Users\pc\AppData\Local\Temp\1545130942726.png" alt="1545130942726"></p><p>可以看得出来<code>with_items</code>是将所有元素放在一个平面当中挨个循环，而<code>with_list</code>只会循环最外层列表。</p></li><li><p>with_flattened</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">- hosts:</span> <span class="string">group1</span></span><br><span class="line"><span class="attr">  remote_user:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">  tasks:</span></span><br><span class="line"><span class="attr">  - debug:</span></span><br><span class="line"><span class="attr">      msg:</span> <span class="string">"<span class="template-variable">&#123;&#123; item &#125;&#125;</span>"</span></span><br><span class="line"><span class="attr">    with_flattened:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">[</span> <span class="number">1</span><span class="string">,</span> <span class="number">2</span><span class="string">,</span> <span class="number">3</span> <span class="string">]</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">[</span> <span class="string">a,</span> <span class="string">b</span> <span class="string">]</span></span><br></pre></td></tr></table></figure><p>效果和<code>with_items</code>是完全一样的。</p></li><li><p>with_tagether</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">- hosts:</span> <span class="string">group1</span></span><br><span class="line"><span class="attr">  remote_user:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">  tasks:</span></span><br><span class="line"><span class="attr">  - debug:</span></span><br><span class="line"><span class="attr">      msg:</span> <span class="string">"<span class="template-variable">&#123;&#123; item &#125;&#125;</span>"</span></span><br><span class="line"><span class="attr">    with_together:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">[</span> <span class="number">1</span><span class="string">,</span> <span class="number">2</span><span class="string">,</span> <span class="number">3</span> <span class="string">]</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">[</span> <span class="string">a,</span> <span class="string">b</span> <span class="string">]</span></span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="C:\Users\pc\AppData\Local\Temp\1545131438550.png" alt="1545131438550"></p></li><li><p>with_cartesian</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">- hosts:</span> <span class="string">group1</span></span><br><span class="line"><span class="attr">  remote_user:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">  tasks:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">"recursion create directory"</span></span><br><span class="line"><span class="attr">    file:</span></span><br><span class="line"><span class="attr">      state:</span> <span class="string">directory</span></span><br><span class="line"><span class="attr">      path:</span> <span class="string">"~/test/test/<span class="template-variable">&#123;&#123; item.0 &#125;&#125;</span>/<span class="template-variable">&#123;&#123; item.1 &#125;&#125;</span>"</span></span><br><span class="line"><span class="attr">    with_cartesion:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">[</span> <span class="string">a,</span> <span class="string">b,</span> <span class="string">c</span> <span class="string">]</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">[</span> <span class="string">test1,</span> <span class="string">test2</span> <span class="string">]</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\pc\AppData\Local\Temp\1545133040672.png" alt="1545133040672"></p></li><li><p>with_nested</p><p>效果同上！</p></li><li><p>with_indexed_items</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">- hosts:</span> <span class="string">node01</span></span><br><span class="line"><span class="attr">  remote_user:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">  tasks:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">name</span> <span class="string">"show items index"</span></span><br><span class="line"><span class="attr">    debug:</span></span><br><span class="line"><span class="attr">      msg:</span> <span class="string">"<span class="template-variable">&#123;&#123; item &#125;&#125;</span>"</span></span><br><span class="line"><span class="attr">    with_indexed_items:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">[</span> <span class="string">test1,</span> <span class="string">test2</span> <span class="string">]</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">[</span> <span class="string">test3,</span> <span class="string">[</span> <span class="string">test4,</span> <span class="string">test5</span> <span class="string">]]</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">[</span> <span class="string">test6</span> <span class="string">]</span></span><br></pre></td></tr></table></figure><p><code>with_indexed_items</code>不会像<code>with_flattened</code>一样将嵌套列表完全扁平化，知识扁平化首层嵌套，第二层的嵌套列表依然当做一个整体元素被打印出来。</p></li><li><p>设定循环起始点和步长</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">- hosts:</span> <span class="string">group1</span></span><br><span class="line"><span class="attr">  remote_user:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">  tasks:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">"create directory on oushu"</span></span><br><span class="line"><span class="attr">    file:</span></span><br><span class="line"><span class="attr">      state:</span> <span class="string">directory</span></span><br><span class="line"><span class="attr">      path:</span> <span class="string">"/root/test/test<span class="template-variable">&#123;&#123; item &#125;&#125;</span>"</span></span><br><span class="line"><span class="attr">    with_sequence:</span></span><br><span class="line">      <span class="string">start=2</span></span><br><span class="line">      <span class="string">end=6</span></span><br><span class="line">      <span class="string">stride=2</span></span><br></pre></td></tr></table></figure><p><code>with_sequence</code>还可以指定<code>stride</code>为负数，即<code>end</code>小于<code>start</code>。还可以格式化字符串format。</p></li><li><p>with_random_choice</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">with_random_chice:</span></span><br><span class="line"><span class="bullet">-</span> <span class="number">1</span></span><br><span class="line"><span class="bullet">-</span> <span class="number">2</span></span><br><span class="line"><span class="bullet">-</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><p>随机返回一个列表。</p></li><li><p>with_dirt</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></table></figure></li><li><p>with_subelements</p></li><li><p>with_file（针对ansible主机）</p><p>循环查看文件内容。</p></li><li><p>with_filelob（针对ansible主机）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">with_filelob:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">/test/test*</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">/etc/systemd/system/*.???????</span></span><br></pre></td></tr></table></figure><p>在指定目录中匹配文件名（不匹配目录）。</p></li></ol><h3 id="条件判断when"><a href="#条件判断when" class="headerlink" title="条件判断when"></a>条件判断when</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span></span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center">比较运算符</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td style="text-align:center">==</td><td style="text-align:left">比较两个对象是否相等，相等为真</td></tr><tr><td style="text-align:center">!=</td><td style="text-align:left">比较两个对象是否不等，不等为真</td></tr><tr><td style="text-align:center">&gt;</td><td style="text-align:left">比较两个值的大小，右边小为真</td></tr><tr><td style="text-align:center">&lt;</td><td style="text-align:left">比较两个值的大小，左边小为真</td></tr><tr><td style="text-align:center">&gt;=</td><td style="text-align:left">比较两个值的大小，如果右边的值小或者左右相等，则为真</td></tr><tr><td style="text-align:center">&lt;=</td><td style="text-align:left">比较连个值的大小，如果左边的值小或者左右相等，则为真</td></tr></tbody></table><table><thead><tr><th style="text-align:center">逻辑运算符</th><th>含义</th></tr></thead><tbody><tr><td style="text-align:center">and</td><td>逻辑与，同时为真，返回真</td></tr><tr><td style="text-align:center">or</td><td>逻辑或，任意一个为真，返回真</td></tr><tr><td style="text-align:center">not</td><td>取反</td></tr><tr><td style="text-align:center">（）</td><td>将一组操作包装在一起</td></tr></tbody></table><ol><li><p>写一个判断shell指令是否真确执行的剧本</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">- hosts:</span> <span class="string">group1</span></span><br><span class="line"><span class="attr">  remote_user:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">  tasks:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">"task: 1"</span></span><br><span class="line"><span class="attr">    shell:</span> <span class="string">"ls /root/testabc"</span></span><br><span class="line"><span class="attr">    register:</span> <span class="string">return</span></span><br><span class="line"><span class="attr">    ignore_errors:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">"task: 2"</span></span><br><span class="line"><span class="attr">    debug:</span></span><br><span class="line"><span class="attr">      msg:</span> <span class="string">"Command Execution Successful"</span></span><br><span class="line"><span class="attr">    when:</span> <span class="string">retuen.rc</span> <span class="string">==</span> <span class="number">0</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">"task: 3"</span></span><br><span class="line"><span class="attr">    debug:</span></span><br><span class="line"><span class="attr">      msg:</span> <span class="string">"Command Execution Failed"</span></span><br><span class="line"><span class="attr">    when:</span> <span class="string">retuen.rc</span> <span class="string">!=</span> <span class="number">0</span></span><br></pre></td></tr></table></figure></li><li><p>条件判断与tests</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">vars:</span> </span><br><span class="line"><span class="attr">- testvar:</span> <span class="string">"/root/test.config"</span></span><br><span class="line"><span class="attr">task:</span></span><br><span class="line"><span class="attr">- debug:</span></span><br><span class="line"><span class="attr">    msg:</span> <span class="string">"file is exists"</span></span><br><span class="line"><span class="attr">  when:</span> <span class="string">not</span> <span class="string">testvar</span> <span class="string">is</span> <span class="string">exists</span><span class="comment"># 这里同样支持逻辑运算符</span></span><br></pre></td></tr></table></figure><p>tests测试文件是否存在的时候，也是只针对ansible主机路径，与目标主机没有关系。</p><p>判断变量的一些tests：<br>defined：判断变量是否已经定义，已经定义则返回真<br>undefind：判断变量是否已经定义，未定义则返回真<br>none：不判断变量值是否为空，如果变量已经定义，但变量值为空，则返回真</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">- hosts:</span> <span class="string">group1</span></span><br><span class="line"><span class="attr">  remote_user:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">  vars:</span></span><br><span class="line"><span class="attr">    testvar:</span> <span class="string">"test"</span></span><br><span class="line"><span class="attr">    testvar1:</span> </span><br><span class="line"><span class="attr">  tasks:</span></span><br><span class="line"><span class="attr">  - debug:</span></span><br><span class="line"><span class="attr">      msg:</span> <span class="string">"Variable is defined"</span></span><br><span class="line"><span class="attr">    when:</span> <span class="string">testvar</span> <span class="string">is</span> <span class="string">defined</span></span><br><span class="line"><span class="attr">  - debug:</span></span><br><span class="line"><span class="attr">      msg:</span> <span class="string">"Variable is undefined"</span></span><br><span class="line"><span class="attr">    when:</span> <span class="string">testvar1</span> <span class="string">is</span> <span class="string">undefined</span></span><br><span class="line"><span class="attr">  - debug:</span></span><br><span class="line"><span class="attr">      msg:</span> <span class="string">"Varibale is none"</span></span><br><span class="line"><span class="attr">    when:</span> <span class="string">testvar1</span> <span class="string">is</span> <span class="string">none</span></span><br></pre></td></tr></table></figure></li><li><p>判断执行结果的tests</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">- hosts:</span> <span class="string">group1</span></span><br><span class="line"><span class="attr">  remote_user:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">  vars:</span></span><br><span class="line"><span class="attr">    doshell:</span> <span class="string">"yes"</span></span><br><span class="line"><span class="attr">  tasks:</span></span><br><span class="line"><span class="attr">  - shell:</span> <span class="string">"cat /root/testabc"</span></span><br><span class="line"><span class="attr">    register:</span> <span class="string">returnmsg</span></span><br><span class="line"><span class="attr">    ignore_errors:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  - debug:</span></span><br><span class="line"><span class="attr">      msg:</span> <span class="string">"Success"</span></span><br><span class="line"><span class="attr">    when:</span> <span class="string">returnmsg</span> <span class="string">is</span> <span class="string">success</span></span><br><span class="line"><span class="attr">  - debug:</span></span><br><span class="line"><span class="attr">      msg:</span> <span class="string">"Failed"</span></span><br><span class="line"><span class="attr">    when:</span> <span class="string">returnmsg</span> <span class="string">is</span> <span class="string">failure</span></span><br><span class="line"><span class="attr">    - debug:</span></span><br><span class="line"><span class="attr">      msg:</span> <span class="string">"Changed"</span></span><br><span class="line"><span class="attr">    when:</span> <span class="string">returnmsg</span> <span class="string">is</span> <span class="string">change</span></span><br><span class="line"><span class="attr">    - debug:</span></span><br><span class="line"><span class="attr">      msg:</span> <span class="string">"Skip"</span></span><br><span class="line"><span class="attr">    when:</span> <span class="string">returnmsg</span> <span class="string">is</span> <span class="string">skip</span></span><br></pre></td></tr></table></figure></li><li><p>判断路径的tests</p><p>代码就不写了，相对简单。</p><p>file：判断路径是否是一个文件，则为真<br>directory：判断路径是否是一个目录，则为真<br>link：判断路径是否是一个连接文件，则为真<br>mount：判断路径是否是一个挂载点，则为真</p><p><strong>注：上述test是2.6版本中的，在2.5之前某些test需要加上<code>is_</code>前缀</strong></p></li><li><p>判断字符串的tests</p><p>lower：字符串为纯小写，则为真<br>upper：字符串为纯大写，则为真</p><p>这个也是相对简单，字符串可以放在变量中来测试</p></li><li><p>判断整除的tests</p><p>even：判断数值是否为偶数，是偶数则为真<br>odd：判断数值是否为技术，是奇数则为真<br>divisibleby(num)：判断是否可以整除指定的数值，如果除以指定的值以后余数为0，则返回真</p><p>subset：判断一个list是不是另一个list的子集，是另一个list的子集时返回真<br>superset：判断一个list是不是另一个list的父集，是另一个list的父集时返回真<br>string：潘帆对象是否是一个字符串，是字符串则返回真</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">- hosts:</span> <span class="string">group1</span></span><br><span class="line"><span class="attr">  remote_user:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">  vars:</span></span><br><span class="line"><span class="attr">    a:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="number">2</span></span><br><span class="line"><span class="bullet">    -</span> <span class="number">5</span></span><br><span class="line"><span class="attr">    b:</span> <span class="string">[</span> <span class="number">1</span><span class="string">,2,3,4,5</span> <span class="string">]</span></span><br><span class="line"><span class="attr">  tasks:</span></span><br><span class="line"><span class="attr">  - debug:</span></span><br><span class="line"><span class="attr">      msg:</span> <span class="string">"A is subset of B"</span></span><br><span class="line"><span class="attr">    when:</span> <span class="string">a</span> <span class="string">is</span> <span class="string">subset(b)</span></span><br><span class="line"><span class="attr">  - debug:</span></span><br><span class="line"><span class="attr">      msg:</span> <span class="string">"B is superset of A"</span></span><br><span class="line"><span class="attr">    when:</span> <span class="string">b</span> <span class="string">is</span> <span class="string">superset(a)</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="异常处理block"><a href="#异常处理block" class="headerlink" title="异常处理block"></a>异常处理block</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">- hosts:</span> <span class="string">group1</span></span><br><span class="line"><span class="attr">  remote_user:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">  tasks:</span></span><br><span class="line"><span class="attr">  - block:</span></span><br><span class="line"><span class="attr">    - shell:</span> <span class="string">'ls /foo'</span></span><br><span class="line"><span class="attr">    rescue:</span></span><br><span class="line"><span class="attr">    - debug:</span></span><br><span class="line"><span class="attr">        msg:</span> <span class="string">"Error"</span></span><br></pre></td></tr></table></figure><p><code>rescue</code>字段会处理同级<code>block</code>字段中的异常，如果<code>block</code>中没有报错则不执行<code>rescue</code>中的步骤。<br>在<code>block</code>当中只有单个任务时，看起来和<code>failed</code>没有什么区别，但是<code>block</code>还是有优势的，<code>block</code>和<code>rescue</code>中均可以由多个任务。<br>和<code>rescue</code>同级别的还有<code>always</code>字段，一看就知道是<code>block</code>字段中的任务无论成功还是失败都将执行<code>always</code>中任务。</p><ol><li><p>filed_when</p><p>当符合条件判断则退出剧本。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">- hosts:</span></span><br><span class="line"><span class="attr">  remote_user:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">  - debug:</span></span><br><span class="line"><span class="attr">      msg:</span> <span class="string">"I execute normally"</span></span><br><span class="line"><span class="attr">  - shell:</span> <span class="string">"echo 'This is string for testing error'"</span></span><br><span class="line"><span class="attr">    register:</span> <span class="string">return_value</span></span><br><span class="line"><span class="attr">    failed_when:</span> <span class="string">'"error" in return_value.stdout'</span></span><br><span class="line"><span class="attr">  - debug:</span></span><br><span class="line"><span class="attr">      msg:</span> <span class="string">"i never execute,Bucause the playbook has stopped"</span></span><br></pre></td></tr></table></figure></li><li><p>changed_when</p><p>faled_when是将符合条件的任务设置为failed状态，那么<code>changed_when</code>就是将符合条件的任务设置为<code>changed</code>状态。除了上述功能外，满足条件让对应的任务永远不能是changed状态。<code>chagne_when=true</code>。changed_when还可以配合handler使用，</p></li></ol><h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h3><p>跟字符串操作相关的过滤器</p><table><thead><tr><th style="text-align:center">字符串相关</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td style="text-align:center">upper</td><td style="text-align:left">转换纯大写[列表适用]</td></tr><tr><td style="text-align:center">lower</td><td style="text-align:left">转换纯小写[列表适用]</td></tr><tr><td style="text-align:center">reverse</td><td style="text-align:left">将字符创翻转</td></tr><tr><td style="text-align:center">first</td><td style="text-align:left">返回第一个字符,[列表适用]</td></tr><tr><td style="text-align:center">last</td><td style="text-align:left">返回最后一个字符,[列表适用]</td></tr><tr><td style="text-align:center">length</td><td style="text-align:left">返回字符创长度，与count等效，[列表适用]</td></tr><tr><td style="text-align:center">list</td><td style="text-align:left">将字符串转换成列表，每个字符串为元素</td></tr><tr><td style="text-align:center">shuffle</td><td style="text-align:left">将字符创转换成列表，并打乱顺序,[列表适用]</td></tr><tr><td style="text-align:center"><strong>数字相关</strong></td><td style="text-align:left"><strong>含义</strong></td></tr><tr><td style="text-align:center">int()</td><td style="text-align:left">转换字整型数字,小括号可设置默认值int(default=6)</td></tr><tr><td style="text-align:center">float()</td><td style="text-align:left">浮点型小数，小括号内可以直接写默认值</td></tr><tr><td style="text-align:center">abs</td><td style="text-align:left">返回绝对值</td></tr><tr><td style="text-align:center">round()</td><td style="text-align:left">四舍五入，小括号内可以执行保留小数点后几位</td></tr><tr><td style="text-align:center">random()</td><td style="text-align:left">返回一个随机数`10</td><td>random(start=5,step=3)`</td></tr><tr><td style="text-align:center"><strong>列表相关</strong></td><td style="text-align:left"><strong>含义</strong></td></tr><tr><td style="text-align:center">min</td><td style="text-align:left">返回列表中的最大值</td></tr><tr><td style="text-align:center">max</td><td style="text-align:left">返回列表中的最小值</td></tr><tr><td style="text-align:center">sort(reverse=true)</td><td style="text-align:left">升序排列，降序(reverse=true)</td></tr><tr><td style="text-align:center">sum</td><td style="text-align:left">返回纯数字非嵌套列表中的所有数字的和</td></tr><tr><td style="text-align:center">flatten(levels=1)</td><td style="text-align:left">“拉平”嵌套列表，小括号可指定拉平几层嵌套</td></tr><tr><td style="text-align:center">join()</td><td style="text-align:left">将列表中的元素合并成一个字符串，小括号可指定元素之间的间隔</td></tr><tr><td style="text-align:center">random()</td><td style="text-align:left">从列表中随机返回一个元素，小括号指定随机种子</td></tr><tr><td style="text-align:center">union()</td><td style="text-align:left">`list1</td><td>union(list2)`返回两个列表的并集</td></tr><tr><td style="text-align:center">intersect()</td><td style="text-align:left">返回两个列表的交集</td></tr><tr><td style="text-align:center">difference()</td><td style="text-align:left">`list1</td><td>difference(list2)`返回存在于list1但不存在list2中的元素</td></tr><tr><td style="text-align:center">symmetric_difference()</td><td style="text-align:left">返回两个列表的并集，且不包含交集</td></tr></tbody></table><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"logs"</span>:[&#123;<span class="attr">"domainName"</span>:<span class="string">"asia1.cdn.test.com"</span>,<span class="attr">"files"</span>:[&#123;<span class="attr">"dateFrom"</span>:<span class="string">"2018-09-05-0000"</span>,<span class="attr">"dateTo"</span>:<span class="string">"2018-09-05-2359"</span>,<span class="attr">"logUrl"</span>:<span class="string">"http://log.testcd.com/log/zsy/asia1.cdn.test.com/2018-09-05-0000-2330_asia1.cdn.test.com.all.log.gz?wskey=XXXXX5a"</span>,<span class="attr">"fileSize"</span>:<span class="number">254</span>,<span class="attr">"fileName"</span>:<span class="string">"2018-09-05-0000-2330_asia1.cdn.test.com.all.log.gz"</span>,<span class="attr">"fileMd5"</span>:<span class="string">"error"</span>&#125;]&#125;,&#123;<span class="attr">"domainName"</span>:<span class="string">"image1.cdn.test.com"</span>,<span class="attr">"files"</span>:[&#123;<span class="attr">"dateFrom"</span>:<span class="string">"2018-09-05-2200"</span>,<span class="attr">"dateTo"</span>:<span class="string">"2018-09-05-2259"</span>,<span class="attr">"logUrl"</span>:<span class="string">"http://log.testcd.com/log/zsy/image1.cdn.test.com/2018-09-05-2200-2230_image1.cdn.test.com.cn.log.gz?wskey=XXXXX1c"</span>,<span class="attr">"fileSize"</span>:<span class="number">10509</span>,<span class="attr">"fileName"</span>:<span class="string">"2018-09-05-2200-2230_image1.cdn.test.com.cn.log.gz"</span>,<span class="attr">"fileMd5"</span>:<span class="string">"error"</span>&#125;,&#123;<span class="attr">"dateFrom"</span>:<span class="string">"2018-09-05-2300"</span>,<span class="attr">"dateTo"</span>:<span class="string">"2018-09-05-2359"</span>,<span class="attr">"logUrl"</span>:<span class="string">"http://log.testcd.com/log/zsy/image1.cdn.test.com/2018-09-05-2300-2330_image1.cdn.test.com.cn.log.gz?wskey=XXXXXfe"</span>,<span class="attr">"fileSize"</span>:<span class="number">5637</span>,<span class="attr">"fileName"</span>:<span class="string">"2018-09-05-2300-2330_image1.cdn.test.com.cn.log.gz"</span>,<span class="attr">"fileMd5"</span>:<span class="string">"error"</span>&#125;]&#125;]&#125;</span><br></pre></td></tr></table></figure><p>一个没有缩进的json文件，返回数据总所有的logUrl：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">- hosts:</span> <span class="string">group1</span></span><br><span class="line"><span class="attr">  remote_user:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">  vars_files:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">/root/test/test/test1.json</span></span><br><span class="line"><span class="attr">  tasks:</span></span><br><span class="line"><span class="attr">  - debug:</span></span><br><span class="line"><span class="attr">      msg:</span> <span class="string">"<span class="template-variable">&#123;&#123; item &#125;&#125;</span>"</span></span><br><span class="line"><span class="attr">    with_items:</span> <span class="string">"<span class="template-variable">&#123;&#123; logs | json_query('files[*].logUrl') &#125;&#125;</span>"</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">test70</span></span><br><span class="line">  <span class="attr">remote_user:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">no</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">  <span class="comment">######################################################################</span></span><br><span class="line">  <span class="comment">#在调用shell模块时，如果引用某些变量时需要添加引号，则可以使用quote过滤器代替引号</span></span><br><span class="line">  <span class="comment">#示例如下，先看示例，后面会有注解</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">shell:</span> <span class="string">"echo <span class="template-variable">&#123;&#123;teststr | quote&#125;&#125;</span> &gt; /testdir/testfile"</span></span><br><span class="line">    <span class="attr">vars:</span></span><br><span class="line">      <span class="attr">teststr:</span> <span class="string">"a\nb\nc"</span></span><br><span class="line">  <span class="comment">#上例中shell模块的写法与如下写法完全等效</span></span><br><span class="line">  <span class="comment">#shell: "echo '&#123;&#123;teststr&#125;&#125;' &gt; /testdir/testfile"</span></span><br><span class="line">  <span class="comment">#没错，如你所见，quote过滤器能够代替引号</span></span><br><span class="line">  <span class="comment">#上例中，如果不对&#123;&#123;teststr&#125;&#125;添加引号，则会报错，因为teststr变量中包含"\n"转义符</span></span><br><span class="line">  <span class="comment">######################################################################</span></span><br><span class="line">  <span class="comment">#ternary过滤器可以实现三元运算的效果 示例如下</span></span><br><span class="line">  <span class="comment">#如下示例表示如果name变量的值是John，那么对应的值则为Mr,否则则为Ms</span></span><br><span class="line">  <span class="comment">#简便的实现类似if else对变量赋值的效果</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">debug:</span> </span><br><span class="line">      <span class="attr">msg:</span> <span class="string">"<span class="template-variable">&#123;&#123; (name == 'John') | ternary('Mr','Ms') &#125;&#125;</span>"</span></span><br><span class="line">    <span class="attr">vars:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">"John"</span></span><br><span class="line">  <span class="comment">######################################################################</span></span><br><span class="line">  <span class="comment">#basename过滤器可以获取到一个路径字符串中的文件名</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">debug:</span></span><br><span class="line">      <span class="attr">msg:</span> <span class="string">"<span class="template-variable">&#123;&#123;teststr | basename&#125;&#125;</span>"</span></span><br><span class="line">    <span class="attr">vars:</span></span><br><span class="line">      <span class="attr">teststr:</span> <span class="string">"/testdir/ansible/testfile"</span></span><br><span class="line">  <span class="comment">######################################################################</span></span><br><span class="line">  <span class="comment">#获取到一个windows路径字符串中的文件名,2.0版本以后的ansible可用</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">debug:</span></span><br><span class="line">      <span class="attr">msg:</span> <span class="string">"<span class="template-variable">&#123;&#123;teststr | win_basename&#125;&#125;</span>"</span></span><br><span class="line">    <span class="attr">vars:</span></span><br><span class="line">      <span class="attr">teststr:</span> <span class="string">'D:\study\zsythink'</span></span><br><span class="line">  <span class="comment">######################################################################</span></span><br><span class="line">  <span class="comment">#dirname过滤器可以获取到一个路径字符串中的路径名</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">debug:</span></span><br><span class="line">      <span class="attr">msg:</span> <span class="string">"<span class="template-variable">&#123;&#123;teststr | dirname&#125;&#125;</span>"</span></span><br><span class="line">    <span class="attr">vars:</span></span><br><span class="line">      <span class="attr">teststr:</span> <span class="string">"/testdir/ansible/testfile"</span></span><br><span class="line">  <span class="comment">######################################################################</span></span><br><span class="line">  <span class="comment">#获取到一个windows路径字符串中的文件名,2.0版本以后的ansible可用</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">debug:</span></span><br><span class="line">      <span class="attr">msg:</span> <span class="string">"<span class="template-variable">&#123;&#123;teststr | win_dirname&#125;&#125;</span>"</span></span><br><span class="line">    <span class="attr">vars:</span></span><br><span class="line">      <span class="attr">teststr:</span> <span class="string">'D:\study\zsythink'</span></span><br><span class="line">  <span class="comment">######################################################################</span></span><br><span class="line">  <span class="comment">#将一个windows路径字符串中的盘符和路径分开,2.0版本以后的ansible可用</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">debug:</span></span><br><span class="line">      <span class="attr">msg:</span> <span class="string">"<span class="template-variable">&#123;&#123;teststr | win_splitdrive&#125;&#125;</span>"</span></span><br><span class="line">    <span class="attr">vars:</span></span><br><span class="line">      <span class="attr">teststr:</span> <span class="string">'D:\study\zsythink'</span></span><br><span class="line">  <span class="comment">#可以配合之前总结的过滤器一起使用，比如只获取到盘符，示例如下</span></span><br><span class="line">  <span class="comment">#msg: "&#123;&#123;teststr | win_splitdrive | first&#125;&#125;"</span></span><br><span class="line">  <span class="comment">#可以配合之前总结的过滤器一起使用，比如只获取到路径，示例如下</span></span><br><span class="line">  <span class="comment">#msg: "&#123;&#123;teststr | win_splitdrive | last&#125;&#125;"</span></span><br><span class="line">  <span class="comment">######################################################################</span></span><br><span class="line">  <span class="comment">#realpath过滤器可以获取软链接文件所指向的真正文件</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">debug:</span></span><br><span class="line">      <span class="attr">msg:</span> <span class="string">"<span class="template-variable">&#123;&#123; path | realpath &#125;&#125;</span>"</span></span><br><span class="line">    <span class="attr">vars:</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">"/testdir/ansible/testsoft"</span></span><br><span class="line">  <span class="comment">######################################################################</span></span><br><span class="line">  <span class="comment">#relpath过滤器可以获取到path对于“指定路径”来说的“相对路径”</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">debug:</span></span><br><span class="line">      <span class="attr">msg:</span> <span class="string">"<span class="template-variable">&#123;&#123; path | relpath('/testdir/testdir') &#125;&#125;</span>"</span></span><br><span class="line">    <span class="attr">vars:</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">"/testdir/ansible"</span></span><br><span class="line">  <span class="comment">######################################################################</span></span><br><span class="line">  <span class="comment">#splitext过滤器可以将带有文件名后缀的路径从“.后缀”部分分开</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">debug:</span></span><br><span class="line">      <span class="attr">msg:</span> <span class="string">"<span class="template-variable">&#123;&#123; path | splitext &#125;&#125;</span>"</span></span><br><span class="line">    <span class="attr">vars:</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">"/etc/nginx/conf.d/test.conf"</span></span><br><span class="line">  <span class="comment">#可以配置之前总结的过滤器，获取到文件后缀</span></span><br><span class="line">  <span class="comment">#msg: "&#123;&#123; path | splitext | last&#125;&#125;"</span></span><br><span class="line">  <span class="comment">#可以配置之前总结的过滤器，获取到文件前缀名</span></span><br><span class="line">  <span class="comment">#msg: "&#123;&#123; path | splitext | first | basename&#125;&#125;"</span></span><br><span class="line">  <span class="comment">######################################################################</span></span><br><span class="line">  <span class="comment">#to_uuid过滤器能够为对应的字符串生成uuid</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">debug:</span></span><br><span class="line">      <span class="attr">msg:</span> <span class="string">"<span class="template-variable">&#123;&#123; teststr | to_uuid &#125;&#125;</span>"</span></span><br><span class="line">    <span class="attr">vars:</span></span><br><span class="line">      <span class="attr">teststr:</span> <span class="string">"This is a test statement"</span> </span><br><span class="line">  <span class="comment">######################################################################</span></span><br><span class="line">  <span class="comment">#bool过滤器可以根据字符串的内容返回bool值true或者false</span></span><br><span class="line">  <span class="comment">#字符串的内容为yes、1、True、true则返回布尔值true，字符串内容为其他内容则返回false</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">debug:</span></span><br><span class="line">      <span class="attr">msg:</span> <span class="string">"<span class="template-variable">&#123;&#123; teststr | bool &#125;&#125;</span>"</span></span><br><span class="line">    <span class="attr">vars:</span></span><br><span class="line">      <span class="attr">teststr:</span> <span class="string">"1"</span></span><br><span class="line">  <span class="comment">#当和用户交互时，有可能需要用户从两个选项中选择一个，比如是否继续，</span></span><br><span class="line">  <span class="comment">#这时，将用户输入的字符串通过bool过滤器处理后得出布尔值，从而进行判断，比如如下用法</span></span><br><span class="line">  <span class="comment">#- debug:</span></span><br><span class="line">  <span class="comment">#    msg: "output when bool is true"</span></span><br><span class="line">  <span class="comment">#  when: some_string_user_input | bool</span></span><br><span class="line">  <span class="comment">######################################################################</span></span><br><span class="line">  <span class="comment">#map过滤器可以从列表中获取到每个元素所共有的某个属性的值，并将这些值组成一个列表</span></span><br><span class="line">  <span class="comment">#当列表中嵌套了列表，不能越级获取属性的值，也就是说只能获取直接子元素的共有属性值。</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">vars:</span></span><br><span class="line">      <span class="attr">users:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">tom</span></span><br><span class="line">        <span class="attr">age:</span> <span class="number">18</span></span><br><span class="line">        <span class="attr">hobby:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Skateboard</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">VideoGame</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">jerry</span></span><br><span class="line">        <span class="attr">age:</span> <span class="number">20</span></span><br><span class="line">        <span class="attr">hobby:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Music</span></span><br><span class="line">    <span class="attr">debug:</span></span><br><span class="line">      <span class="attr">msg:</span> <span class="string">"<span class="template-variable">&#123;&#123; users | map(attribute='name') | list &#125;&#125;</span>"</span></span><br><span class="line">  <span class="comment">#也可以组成一个字符串，用指定的字符隔开，比如分号</span></span><br><span class="line">  <span class="comment">#msg: "&#123;&#123; users | map(attribute='name') | join(';') &#125;&#125;"</span></span><br><span class="line">  <span class="comment">######################################################################</span></span><br><span class="line">  <span class="comment">#与python中的用法相同，两个日期类型相减能够算出两个日期间的时间差</span></span><br><span class="line">  <span class="comment">#下例中，我们使用to_datatime过滤器将字符串类型转换成了日期了类型，并且算出了时间差</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">debug:</span></span><br><span class="line">      <span class="attr">msg:</span> <span class="string">'<span class="template-variable">&#123;&#123; ("2016-08-14 20:00:12"| to_datetime) - ("2012-12-25 19:00:00" | to_datetime) &#125;&#125;</span>'</span></span><br><span class="line">  <span class="comment">#默认情况下，to_datatime转换的字符串的格式必须是“%Y-%m-%d %H:%M:%S”</span></span><br><span class="line">  <span class="comment">#如果对应的字符串不是这种格式，则需要在to_datetime中指定与字符串相同的时间格式，才能正确的转换为时间类型</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">debug:</span></span><br><span class="line">      <span class="attr">msg:</span> <span class="string">'<span class="template-variable">&#123;&#123; ("20160814"| to_datetime("%Y%m%d")) - ("2012-12-25 19:00:00" | to_datetime) &#125;&#125;</span>'</span></span><br><span class="line">  <span class="comment">#如下方法可以获取到两个日期之间一共相差多少秒</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">debug:</span></span><br><span class="line">      <span class="attr">msg:</span> <span class="string">'<span class="template-variable">&#123;&#123; ( ("20160814"| to_datetime("%Y%m%d")) - ("20121225" | to_datetime("%Y%m%d")) ).total_seconds() &#125;&#125;</span>'</span></span><br><span class="line">  <span class="comment">#如下方法可以获取到两个日期“时间位”相差多少秒，注意：日期位不会纳入对比计算范围</span></span><br><span class="line">  <span class="comment">#也就是说，下例中的2016-08-14和2012-12-25不会纳入计算范围</span></span><br><span class="line">  <span class="comment">#只是计算20:00:12与08:30:00相差多少秒</span></span><br><span class="line">  <span class="comment">#如果想要算出连带日期的秒数差则使用total_seconds()</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">debug:</span></span><br><span class="line">      <span class="attr">msg:</span> <span class="string">'<span class="template-variable">&#123;&#123; ( ("2016-08-14 20:00:12"| to_datetime) - ("2012-12-25 08:30:00" | to_datetime) ).seconds &#125;&#125;</span>'</span></span><br><span class="line">  <span class="comment">#如下方法可以获取到两个日期“日期位”相差多少天，注意：时间位不会纳入对比计算范围</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">debug:</span></span><br><span class="line">      <span class="attr">msg:</span> <span class="string">'<span class="template-variable">&#123;&#123; ( ("2016-08-14 20:00:12"| to_datetime) - ("2012-12-25 08:30:00" | to_datetime) ).days &#125;&#125;</span>'</span></span><br><span class="line">  <span class="comment">######################################################################</span></span><br><span class="line">  <span class="comment">#使用base64编码方式对字符串进行编码</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">debug:</span></span><br><span class="line">      <span class="attr">msg:</span> <span class="string">"<span class="template-variable">&#123;&#123; 'hello' | b64encode &#125;&#125;</span>"</span></span><br><span class="line">  <span class="comment">#使用base64编码方式对字符串进行解码</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">debug:</span></span><br><span class="line">      <span class="attr">msg:</span> <span class="string">"<span class="template-variable">&#123;&#123; 'aGVsbG8=' | b64decode &#125;&#125;</span>"</span></span><br><span class="line">  <span class="comment">#######################################################################</span></span><br><span class="line">  <span class="comment">#使用sha1算法对字符串进行哈希</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">debug:</span></span><br><span class="line">      <span class="attr">msg:</span> <span class="string">"<span class="template-variable">&#123;&#123; '123456' | hash('sha1') &#125;&#125;</span>"</span></span><br><span class="line">  <span class="comment">#使用md5算法对字符串进行哈希</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">debug:</span></span><br><span class="line">      <span class="attr">msg:</span> <span class="string">"<span class="template-variable">&#123;&#123; '123456' | hash('md5') &#125;&#125;</span>"</span></span><br><span class="line">  <span class="comment">#获取到字符串的校验和,与md5哈希值一致</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">debug:</span></span><br><span class="line">      <span class="attr">msg:</span> <span class="string">"<span class="template-variable">&#123;&#123; '123456' | checksum &#125;&#125;</span>"</span></span><br><span class="line">  <span class="comment">#使用blowfish算法对字符串进行哈希，注:部分系统支持</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">debug:</span></span><br><span class="line">      <span class="attr">msg:</span> <span class="string">"<span class="template-variable">&#123;&#123; '123456' | hash('blowfish') &#125;&#125;</span>"</span></span><br><span class="line">  <span class="comment">#使用sha256算法对字符串进行哈希,哈希过程中会生成随机"盐",以便无法直接对比出原值</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">debug:</span></span><br><span class="line">      <span class="attr">msg:</span> <span class="string">"<span class="template-variable">&#123;&#123; '123456' | password_hash('sha256') &#125;&#125;</span>"</span></span><br><span class="line">  <span class="comment">#使用sha256算法对字符串进行哈希,并使用指定的字符串作为"盐"</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">debug:</span></span><br><span class="line">      <span class="attr">msg:</span> <span class="string">"<span class="template-variable">&#123;&#123; '123456' | password_hash('sha256','mysalt') &#125;&#125;</span>"</span></span><br><span class="line">  <span class="comment">#使用sha512算法对字符串进行哈希,哈希过程中会生成随机"盐",以便无法直接对比出原值</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">debug:</span></span><br><span class="line">      <span class="attr">msg:</span> <span class="string">"<span class="template-variable">&#123;&#123; '123123' | password_hash('sha512') &#125;&#125;</span>"</span></span><br><span class="line">  <span class="comment">#使用sha512算法对字符串进行哈希,并使用指定的字符串作为"盐"</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">debug:</span></span><br><span class="line">      <span class="attr">msg:</span> <span class="string">"<span class="template-variable">&#123;&#123; '123123' | password_hash('sha512','ebzL.U5cjaHe55KK') &#125;&#125;</span>"</span></span><br><span class="line">  <span class="comment">#如下方法可以幂等的为每个主机的密码生成对应哈希串</span></span><br><span class="line">  <span class="comment">#有了之前总结的过滤器用法作为基础，你一定已经看懂了</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">debug:</span></span><br><span class="line">      <span class="attr">msg:</span> <span class="string">"<span class="template-variable">&#123;&#123; '123123' | password_hash('sha512', 65534|random(seed=inventory_hostname)|string) &#125;&#125;</span>"</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/intro/ansible-bg.jpg&quot; alt=&quot;ansible&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Handler字段&quot;&gt;&lt;a href=&quot;#Handler字段&quot; class=&quot;headerlink&quot; title=&quot;Handler字段&quot;&gt;&lt;/a&gt;Hand
      
    
    </summary>
    
    
    
      <category term="ansible" scheme="https://laolees.github.io/tags/ansible/"/>
    
  </entry>
  
  <entry>
    <title>Sed 实记</title>
    <link href="https://laolees.github.io/2019/04/23/command-Sed/"/>
    <id>https://laolees.github.io/2019/04/23/command-Sed/</id>
    <published>2019-04-23T02:19:01.000Z</published>
    <updated>2019-11-07T11:54:18.000Z</updated>
    
    <content type="html"><![CDATA[<p> <img src="intro/sed-bg.png" alt="sed"></p><p>sed编辑命令</p><table><thead><tr><th>p</th><th>打印匹配行</th></tr></thead><tbody><tr><td>=</td><td>打印文件行号</td></tr><tr><td>a\</td><td>在定位行之后追加文本</td></tr><tr><td>i\</td><td>在定位行之前插入文本</td></tr><tr><td>d</td><td>删除定位行</td></tr><tr><td>c\</td><td>用新文本替换定位文本</td></tr><tr><td>s</td><td>使用替换模式替换相应模式</td></tr><tr><td>r</td><td>从另一个文件读取文本</td></tr><tr><td>w</td><td>将文本写入到一个文件</td></tr><tr><td>y</td><td>变换字符,类似替换</td></tr><tr><td>q</td><td>第一个模式匹配完成后退出</td></tr><tr><td>l</td><td>显示与八进制ASCII码等价的控制字符</td></tr><tr><td>{}</td><td>在定位行执行的命令组</td></tr><tr><td>n</td><td>读取下一个输入行，用下一个命令处理新的行</td></tr><tr><td>h</td><td>将模式缓冲区的文本复制到保持缓冲区</td></tr><tr><td>H</td><td>将模式缓冲区的文本追加到保持缓冲区</td></tr><tr><td>x</td><td>互换模式缓冲区和保持缓冲区的内容</td></tr><tr><td>g</td><td>将保持缓冲区的内容复制到模式缓冲区</td></tr><tr><td>G</td><td>将保持缓冲区你内容追加到模式缓冲区</td></tr></tbody></table><table><thead><tr><th>g</th><th>替换文本全部</th></tr></thead><tbody><tr><td>p</td><td>与n选项结合只打印替换行</td></tr><tr><td>w 文件名</td><td>输出定向到一个文件</td></tr></tbody></table><p>Eg：</p><ul><li><p>-n打印文件第一行(不加选项，还会打印全部内容)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sed -n <span class="string">'1p'</span> input</span><br><span class="line">sed -n <span class="string">'1,3p'</span> input</span><br></pre></td></tr></table></figure></li><li><p>’=‘只打印对应内容的行号</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -n <span class="string">'/string/='</span> input</span><br></pre></td></tr></table></figure></li><li><p>-e 打印查询字符并显示行号</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -e <span class="string">'/string/='</span> -e <span class="string">'/string/p'</span> input</span><br></pre></td></tr></table></figure><p>等价于sed ‘/string/{=;p}’ input`</p></li><li><p>a\在指定内容后追加</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed <span class="string">'/string/a\append a new line.'</span> input</span><br></pre></td></tr></table></figure></li><li><p>在文件最后一行追加</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed <span class="string">'$'</span>a\string input</span><br></pre></td></tr></table></figure></li><li><p>替换文本</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sed -n <span class="string">'/string/c\int'</span> input</span><br><span class="line">sed -n <span class="string">'s/string/int/2g'</span> input<span class="comment">#替换第2个匹配到的字符串</span></span><br><span class="line">sed -n <span class="string">'/string/s#string#int#g'</span><span class="comment">#替换所有匹配到的字符串</span></span><br></pre></td></tr></table></figure><p>错误用法(-ni选项不能连用)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sed -ni <span class="string">'/string/c\int/p'</span> php.ini</span><br><span class="line">sed -ni <span class="string">'s/string/int/p'</span> php.ini</span><br></pre></td></tr></table></figure></li><li><p>删除最后一行和最后一行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -e <span class="string">'$'</span>d  -e <span class="string">'1'</span>d input</span><br></pre></td></tr></table></figure></li><li><p>只打印替换行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -n <span class="string">'s/string/int/p'</span> input</span><br></pre></td></tr></table></figure></li><li><p>分别替换第n次匹配</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -n <span class="string">'s/string/np'</span> input</span><br></pre></td></tr></table></figure></li><li><p>显示控制字符（ASCII）</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -n <span class="string">'1,$'</span>l input</span><br></pre></td></tr></table></figure></li><li><p>处理匹配行的下一行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed <span class="string">'/string/&#123;n;s/cf/lol/;&#125; input</span></span><br></pre></td></tr></table></figure></li><li><p>在指定字符串后/前添加内容</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">'s/index.html/&amp; index.php /'</span> httpd.conf</span><br><span class="line">sed -i <span class="string">'s/index.html/index.php &amp;/'</span> httpd.conf</span><br></pre></td></tr></table></figure><p> &amp;就代表着指定的字符串位置</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt; &lt;img src=&quot;intro/sed-bg.png&quot; alt=&quot;sed&quot;&gt;&lt;/p&gt;
&lt;p&gt;sed编辑命令&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;p&lt;/th&gt;
&lt;th&gt;打印匹配行&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td
      
    
    </summary>
    
    
    
      <category term="shell" scheme="https://laolees.github.io/tags/shell/"/>
    
      <category term="sed" scheme="https://laolees.github.io/tags/sed/"/>
    
  </entry>
  
</feed>
